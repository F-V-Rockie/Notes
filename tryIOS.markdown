## **IOS发展**
> WWDC（苹果全球开发者大会）

## **技术前景**
1. Objective-C
2. Swift

## **Swift语言基础**

### **数据类型**

- 变量与常量

变量：var

常量：let

标识符：以字符（包括Unicode字符）、下划线（_）、美元符（$）开头，不以数字开头，不包含空格，不使用关键字，其长度没有限制

占位符：\(变量)

- 整形与浮点型

整形Int：可以增加下划线作为分隔符，也可以在数值前添加额外的值

整形之间转换必须是显示转换

浮点型：

+-inf = /0.0

非数nan = 0.0/0.0

- 类型别名：typealias

- 元组类型

定义元祖变量，给定初始值

赋值时必须为所有的成员变量赋值

通过key赋值，顺序可以调换

根据下标输出元素

- 可选类型

可选类型：任何已知类型紧跟?，nil表示值缺失

强制解析：变量或常量后面添加!

**注意：***可选类型的变量和常量确实有值时才能解析成功*

可选绑定：if或while语句中对可选类型的值进行判断，并把值赋给变量或常量

隐式解析可选类型：已有类型后面添加!，适用于被赋值之后不会重新变为nil的变量

- 注释

```
//单行注释

/*
  /*
    多行注释可以嵌套
  */
*/
```
  
### **运算符**

- 赋值运算符

赋值表达式无值

不支持连续赋值

扩展的赋值运算符：+=、-=、*=、/=、&=、\|=

- 算数运算符

求余运算%：结果的正负取决于被除数

- 溢出运算符：&-、&+、&*、&/、&%

- 位运算符

按位与&

按位或\|

按位异或^

按位取反~

按位左位移<<

按位右位移>>

- 区间运算符

左闭右开区间运算符..<

闭区间运算符...

- 比较运算符

结果为bool值

特征相等运算符===

特征不等运算符!==

- 逻辑运算符

与&&

或\|\|

非!

- 三目运算符

- 空合并运算符

nil合并运算符：a ?? b 对可选类型a进行空判断，如果a包含值就进行解封，否则返回默认值b

**注意：**

*表达式a必须是Optical类型，默认值b的类型必须和a存储值的类型保持一致*

*如果a为非空值（non-nil），那么b不会被估值*

- 运算符的结合性和优先级

单目运算符、赋值运算符和三目运算符从右向左结合

### **流程控制**

- 顺序结构

- 分支结构

if语句：条件执行体放在{}中

switch语句：任意case块执行完成后自动终止该switch语句，不用break

每个case块至少包含一条语句

case标签后可以有多个值，用逗号隔开

fallthrough贯穿语句

case块的条件可以是范围或元组

case值绑定：将元组的成员绑定到临时变量

case条件值绑定：where语句

- 循环结构

while循环：先判断，条件为真执行循环体

do while循环：先执行在判断，条件为真继续循环

for_in循环：下划线符号_替代循环变量，忽略具体的值，不提供循环遍历时对值的访问

标签：紧跟冒号的标识符，放在switch语句或循环语句之前起作用

break：结束循环，开始执行循环之后的代码

continue：忽略本次循环剩余语句，执行下一次循环，不终止循环

### **字符和字符串**

- 字符类型及表现形式

单个字符指定字符常量

转义字符表示特殊字符常量

使用\u{n}的Unicode形式，n代表1~8位的十六进制数

必须包含在双引号内

每个字符代表一个可扩展字母集

- 字符串的创建

使用构造器来创建字符串，初始化字符串实例

创建多个重复字符的字符串

- 字符串基本操作

判断字符串是否为空isEmpty

字符串拼接：用+进行拼接 用+=将字符串拼接到自身

通过调用全局countElement函数，将字符串作为参数进行传递，获取该字符串的字符数量

字符串是否可以修改通过定义变量或常量决定

字符串比较==

检查字符串是否拥有特定前缀hasPrefix或后缀hasSuffix：以字符串作为参数传入并穿出Boolean值

### **集合**

#### **数组**

- 数组创建

声明数组写法：Array<SomeType>，[SomeType]

使用构造语法创建由特定数据类型构成的空数组

for_in变量默认是let类型

- 访问和修改数组（数组的可变性）

在数组尾部添加新元素append()

通过加法添加数组元素

替换

不能使用下标语法在数组尾部添加新项，调用insert(atIndex:)方法在某个具体索引值之前添加数据项

使用removeAtIndex方法移除数组中的一项

removeLast方法移除数组中的最后一项

removeAll删除所有元素，参数为是否保留数据缓冲，默认是false

#### **字典**

- 字典的声明和创建

Dictionary<KeyType, valueType>

[KeyType: valueType]

通过变量或常量决定字典是否可变

- 字典的使用

不存在的key，返回为nil

对不存在的key设置value，字典将会添加key-value对

遍历字典时使用元组

updateValue(forKey:)方法在键不存在对应值时设置值或在存在时更新已存在的值，返回更新之前的原值

移除键值：removeAll，removeValueForKey

### **函数**

- 定义和调用函数

```
func 函数名(形参列表) ->返回值类型 {
	可执行语句组成的函数
}
```

- 函数形参

没有参数的函数，()必须有

局部参数：不能再调用函数时使用

外部参数名：局部参数名:形参类型

外部参数和局部参数一样，只需要在局部参数前加#

可变参数：在参数类型后添加...，表示该参数可以接受多个参数值

一个函数只能有一个可变参数

默认参数：默认参数有外部参数名，忽略添加_

可变参数在参数列表的末尾，默认值参数在次后

常量形参：默认形参是常量

变量形参：形参的改变在函数体内部有效

In-Out形参：将值类型参数传入函数内部，强制传递变量的指针

**注意：**

*只能传入变量作为实参*

*输入输出参数不能带有默认值*

*用关键字inout标记的参数不能再用var或let标记*

- 函数返回值

无指定返回返回类型的函数返回void，可以理解为空元组

多个返回值

- 函数类型

函数类型作为变量或常量、参数类型或返回值类型

- 递归函数

- 函数重载

形参列表或返回值类型不同

### **闭包**

闭包是引用类型

- 嵌套函数

函数体内部定义的函数

- 闭包表达式

```
{ (形参列表) -> 返回值类型 in
	可执行表达式
}
```

- 利用上下文推断类型

省略形参名，通过$0, $1...引用第一个、第二个参数

- 捕获上下文中的变量和常量

- 尾随闭包

## **Swift语言基础**

- 面向对象的特点

1. 面向对象的核心：类和对象
2. 面向对象编程的三大特征：封装、继承和多态
3. Swift可定义枚举、结构体和类三种面向对象的类型
4. 支持定义存储属性、计算属性、方法、下标、构造器和嵌套类型

### **枚举**

1. 用于管理一组有限的值的集合
2. 支持计算属性
3. 支持实例方法和类方法
4. 支持定义构造器来完成初始化
5. 支持扩展和协议

- 定义枚举的语法格式

```
enum 枚举名 {
	// 使用case关键字列出所有枚举值
	// 枚举的其它成员
}
```

使用一个case列举所有的值

使用枚举声明变量

使用switch语句判断枚举值：switch中的case没有覆盖枚举的所有值，必须添加default语句

- 原始值

```
enum 枚举名 : 原始值类型 {
	case 枚举值 = 原始值
}
```

rawValue获取原始值：init ? (rawValue:)

- 关联值

将关联值绑定到变量或常量来获取：将关联值提取为变量或常量，只将一个var或let放在枚举成员之前